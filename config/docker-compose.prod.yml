version: '3.8'

services:
  # PostgreSQL Database for production
  postgres:
    image: postgres:15-alpine
    container_name: synctask-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-synctask_db}
      POSTGRES_USER: ${POSTGRES_USER:-synctask}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - synctask-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for production
  redis:
    image: redis:7-alpine
    container_name: synctask-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - synctask-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API for production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: synctask-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-synctask}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-synctask_db}?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - synctask-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend for production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: synctask-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - synctask-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: synctask-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - synctask-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_prod_data:
  redis_prod_data:


networks:
  synctask-prod-network:
    driver: bridge
