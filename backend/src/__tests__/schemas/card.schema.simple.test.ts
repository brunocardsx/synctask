import {
  createCardSchema,
  updateCardSchema,
} from '../../schemas/cardSchema.js';

describe('Card Schemas - Simple Tests', () => {
  describe('createCardSchema', () => {
    it('deve validar dados corretos de card', () => {
      const validData = {
        title: 'Tarefa Importante',
        description: 'DescriÃ§Ã£o da tarefa',
      };
      expect(() => createCardSchema.parse(validData)).not.toThrow();
    });

    it('deve aceitar card apenas com tÃ­tulo', () => {
      const validData = {
        title: 'Tarefa Simples',
      };
      expect(() => createCardSchema.parse(validData)).not.toThrow();
    });

    it('deve rejeitar tÃ­tulo ausente', () => {
      const invalidData = {
        description: 'DescriÃ§Ã£o sem tÃ­tulo',
      };
      expect(() => createCardSchema.parse(invalidData)).toThrow();
    });

    it('deve rejeitar tÃ­tulo vazio', () => {
      const invalidData = {
        title: '',
        description: 'DescriÃ§Ã£o',
      };
      expect(() => createCardSchema.parse(invalidData)).toThrow();
    });

    it('deve rejeitar tÃ­tulo muito longo', () => {
      const invalidData = {
        title: 'A'.repeat(101), // 101 caracteres
        description: 'DescriÃ§Ã£o',
      };
      expect(() => createCardSchema.parse(invalidData)).toThrow();
    });

    it('deve aceitar tÃ­tulo com exatamente 100 caracteres', () => {
      const validData = {
        title: 'A'.repeat(100),
        description: 'DescriÃ§Ã£o',
      };
      expect(() => createCardSchema.parse(validData)).not.toThrow();
    });

    it('deve rejeitar descriÃ§Ã£o muito longa', () => {
      const invalidData = {
        title: 'TÃ­tulo',
        description: 'A'.repeat(501), // 501 caracteres
      };
      expect(() => createCardSchema.parse(invalidData)).toThrow();
    });

    it('deve aceitar descriÃ§Ã£o com exatamente 500 caracteres', () => {
      const validData = {
        title: 'TÃ­tulo',
        description: 'A'.repeat(500),
      };
      expect(() => createCardSchema.parse(validData)).not.toThrow();
    });

    it('deve aceitar caracteres especiais no tÃ­tulo', () => {
      const validData = {
        title: 'Tarefa: Implementar feature v2.0 ðŸš€',
        description: 'DescriÃ§Ã£o com emojis ðŸ˜Š',
      };
      expect(() => createCardSchema.parse(validData)).not.toThrow();
    });
  });

  describe('updateCardSchema', () => {
    it('deve validar dados corretos de atualizaÃ§Ã£o', () => {
      const validData = {
        title: 'Tarefa Atualizada',
        description: 'Nova descriÃ§Ã£o',
      };
      expect(() => updateCardSchema.parse(validData)).not.toThrow();
    });

    it('deve aceitar atualizaÃ§Ã£o apenas do tÃ­tulo', () => {
      const validData = {
        title: 'Novo TÃ­tulo',
      };
      expect(() => updateCardSchema.parse(validData)).not.toThrow();
    });

    it('deve aceitar atualizaÃ§Ã£o apenas da descriÃ§Ã£o', () => {
      const validData = {
        title: 'TÃ­tulo mantido',
        description: 'Nova descriÃ§Ã£o',
      };
      expect(() => updateCardSchema.parse(validData)).not.toThrow();
    });

    it('deve rejeitar tÃ­tulo vazio na atualizaÃ§Ã£o', () => {
      const invalidData = {
        title: '',
      };
      expect(() => updateCardSchema.parse(invalidData)).toThrow();
    });

    it('deve rejeitar tÃ­tulo muito longo na atualizaÃ§Ã£o', () => {
      const invalidData = {
        title: 'A'.repeat(101),
      };
      expect(() => updateCardSchema.parse(invalidData)).toThrow();
    });
  });
});
